{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sandeeppasunuri/workspace/next-apollo-demo/client/pages/users.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { withApollo } from '@apollo/client/react/hoc';\nimport Link from 'next/link';\nimport { Grid, Column, Row, Heading1, UserCard, Button } from '../components';\nconst QUERY = gql`\n    query Query($offset: Int, $limit: Int){\n        getAllUsers(offset:$offset, limit:$limit) {\n            count\n            result {\n                name,\n                email,\n                phone,\n                address {\n                    street,\n                    zipcode,\n                    city\n                }\n            }\n        }\n    }\n`;\n\nconst Page = () => {\n  const {\n    data,\n    loading,\n    error,\n    fetchMore,\n    client\n  } = useQuery(QUERY, {\n    variables: {\n      offset: 0,\n      limit: 10\n    },\n    fetchPolicy: \"network-only\"\n  });\n  useEffect(() => {\n    return () => {\n      client.cache.modify({\n        fields: {\n          getAllUsers: value => _objectSpread(_objectSpread({}, value), {}, {\n            result: []\n          })\n        }\n      });\n    };\n  }, [client]);\n  const loadMore = useCallback(() => fetchMore({\n    variables: {\n      offset: data.getAllUsers.result.length\n    }\n  }), [fetchMore, data]);\n  const hasMore = useMemo(() => {\n    if (!data) return false;\n    return data.getAllUsers.count !== data.getAllUsers.result.length;\n  }, [data]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Failed to load...!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 23\n  }, this);\n  const {\n    getAllUsers: {\n      result\n    }\n  } = data;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Column, {\n        className: \"mt-4\",\n        children: /*#__PURE__*/_jsxDEV(Heading1, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            href: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 31\n          }, this), \" / Users\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: result.map(user => /*#__PURE__*/_jsxDEV(Column, {\n        medium: 6,\n        children: /*#__PURE__*/_jsxDEV(UserCard, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, user.phone, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), hasMore && /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Column, {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: loadMore,\n          className: \"my-4 ml-auto\",\n          children: \"Load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\nexport default withApollo(Page);","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/pages/users.tsx"],"names":["useCallback","useEffect","useMemo","useQuery","gql","withApollo","Link","Grid","Column","Row","Heading1","UserCard","Button","QUERY","Page","data","loading","error","fetchMore","client","variables","offset","limit","fetchPolicy","cache","modify","fields","getAllUsers","value","result","loadMore","length","hasMore","count","map","user","phone","textAlign"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { withApollo } from '@apollo/client/react/hoc';\nimport Link from 'next/link'\nimport {\n    Grid, Column, Row, Heading1, UserCard, Button\n} from '../components';\n\nconst QUERY = gql`\n    query Query($offset: Int, $limit: Int){\n        getAllUsers(offset:$offset, limit:$limit) {\n            count\n            result {\n                name,\n                email,\n                phone,\n                address {\n                    street,\n                    zipcode,\n                    city\n                }\n            }\n        }\n    }\n`;\n\nconst Page = () => {\n    const {\n        data, loading, error, fetchMore, client\n    } = useQuery(\n        QUERY,\n        {\n            variables: {\n                offset: 0,\n                limit: 10\n            },\n            fetchPolicy: \"network-only\"\n        }\n    );\n\n\n    useEffect(() => {\n        return () => {\n            client.cache.modify({\n                fields: {\n                    getAllUsers: value => ({\n                        ...value,\n                        result: []\n                    })\n                }\n            });\n        }\n    }, [client]);\n\n    const loadMore = useCallback(\n        () => fetchMore({ variables: { offset: data.getAllUsers.result.length } }),\n        [fetchMore, data]\n    );\n\n    const hasMore = useMemo(\n        () => {\n            if (!data) return false;\n            return data.getAllUsers.count !== data.getAllUsers.result.length\n        },\n        [data]\n    );\n\n    if (loading) return <h2>Loading...</h2>;\n\n    if (error) return <h2>Failed to load...!</h2>;\n\n    const { getAllUsers: { result } } = data;\n\n    return (\n        <Grid>\n            <Row>\n                <Column className=\"mt-4\">\n                    <Heading1><Link href=\"/\"><a>Home</a></Link> / Users</Heading1>\n                </Column>\n            </Row>\n            <br />\n            <Row>\n                {result.map(user => (\n                    <Column medium={6} key={user.phone}>\n                        <UserCard user={user} />\n                    </Column>\n                ))}\n            </Row>\n            {hasMore && (\n                <Row>\n                    <Column style={{ textAlign: 'center' }}>\n                        <Button onClick={loadMore} className=\"my-4 ml-auto\">Load more</Button>\n                    </Column>\n                </Row>\n            )}\n        </Grid>\n    )\n};\n\nexport default withApollo(Page);\n"]},"metadata":{},"sourceType":"module"}