{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { offsetLimitPagination } from \"@apollo/client/utilities\";\nexport default _objectSpread(_objectSpread({}, offsetLimitPagination()), {}, {\n  read: existing => existing,\n  merge: (existing, incoming) => {\n    if (existing) {\n      return _objectSpread(_objectSpread({}, incoming), {}, {\n        result: [...existing.result, ...incoming.result]\n      });\n    }\n\n    return incoming;\n  }\n});","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/apollo-client/cache/type-policies/query/fields/user/get-all-users.ts"],"names":["offsetLimitPagination","read","existing","merge","incoming","result"],"mappings":";;;;;;AAAA,SAASA,qBAAT,QAAsC,0BAAtC;AAMA,+CACOA,qBAAqB,EAD5B;AAEIC,EAAAA,IAAI,EAAGC,QAAD,IAAiDA,QAF3D;AAGIC,EAAAA,KAAK,EAAE,CAACD,QAAD,EAA4BE,QAA5B,KAA2E;AAC9E,QAAIF,QAAJ,EAAc;AACV,6CACOE,QADP;AAEIC,QAAAA,MAAM,EAAE,CACJ,GAAGH,QAAQ,CAACG,MADR,EAEJ,GAAGD,QAAQ,CAACC,MAFR;AAFZ;AAOH;;AACD,WAAOD,QAAP;AACH;AAdL","sourcesContent":["import { offsetLimitPagination } from \"@apollo/client/utilities\";\n\ntype getAllUsersType = {\n    count: Number, result: Array<object>\n}\n\nexport default {\n    ...offsetLimitPagination(),\n    read: (existing: getAllUsersType): getAllUsersType =>  existing,\n    merge: (existing: getAllUsersType, incoming: getAllUsersType): getAllUsersType => {\n        if (existing) {\n            return {\n                ...incoming,\n                result: [\n                    ...existing.result,\n                    ...incoming.result\n                ]\n            };\n        }\n        return incoming;\n    }\n}"]},"metadata":{},"sourceType":"module"}