{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { offsetLimitPagination } from \"@apollo/client/utilities\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          getAllUsers: _objectSpread(_objectSpread({}, offsetLimitPagination()), {}, {\n            read(existing, {\n              args\n            }) {\n              return existing;\n            },\n\n            keyArgs: [],\n\n            merge(existing, incoming) {\n              if (existing) {\n                return _objectSpread(_objectSpread({}, existing), {}, {\n                  result: [...existing.result, ...incoming.result]\n                });\n              }\n\n              return incoming;\n            }\n\n          })\n        }\n      }\n    }\n  })\n});\nexport default client;","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/utils/apollo-client.ts"],"names":["ApolloClient","InMemoryCache","offsetLimitPagination","client","uri","cache","typePolicies","Query","fields","getAllUsers","read","existing","args","keyArgs","merge","incoming","result"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AAEA,MAAMC,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAC5BI,EAAAA,GAAG,EAAE,+BADuB;AAE5BC,EAAAA,KAAK,EAAE,IAAIJ,aAAJ,CAAkB;AACrBK,IAAAA,YAAY,EAAE;AACVC,MAAAA,KAAK,EAAE;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,WAAW,kCACJP,qBAAqB,EADjB;AAEPQ,YAAAA,IAAI,CAACC,QAAD,EAAW;AAAEC,cAAAA;AAAF,aAAX,EAAqB;AACrB,qBAAOD,QAAP;AACH,aAJM;;AAKPE,YAAAA,OAAO,EAAE,EALF;;AAMPC,YAAAA,KAAK,CAACH,QAAD,EAAWI,QAAX,EAAqB;AACtB,kBAAIJ,QAAJ,EAAc;AACV,uDACOA,QADP;AAEIK,kBAAAA,MAAM,EAAE,CACJ,GAAGL,QAAQ,CAACK,MADR,EAEJ,GAAGD,QAAQ,CAACC,MAFR;AAFZ;AAOH;;AACD,qBAAOD,QAAP;AACH;;AAjBM;AADP;AADL;AADG;AADO,GAAlB;AAFqB,CAAjB,CAAf;AA+BA,eAAeZ,MAAf","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { offsetLimitPagination } from \"@apollo/client/utilities\";\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5000/graphql',\n    cache: new InMemoryCache({\n        typePolicies: {\n            Query: {\n                fields: {\n                    getAllUsers: {\n                        ...offsetLimitPagination(),\n                        read(existing, { args }) {\n                            return existing;\n                        },\n                        keyArgs: [],\n                        merge(existing, incoming) {\n                            if (existing) {\n                                return {\n                                    ...existing,\n                                    result: [\n                                        ...existing.result,\n                                        ...incoming.result\n                                    ]\n                                };\n                            }\n                            return incoming;\n                        }\n                    }\n                }\n            }\n        }\n    })\n});\n\nexport default client;"]},"metadata":{},"sourceType":"module"}