{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/sandeeppasunuri/workspace/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sandeeppasunuri/workspace/next-apollo-demo/client/components/templates/users-list-gql-pagination.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { default as LinkTo } from 'next/link';\nimport { Grid, Column, Row, Heading1, Link } from '../elements';\nimport useCustomQuery from \"../../hooks/useCustomQuery\";\nimport { usersQuery } from '../../queries/users/users';\nimport { LOAD_SIZE } from '../../constants';\n\nvar UsersList = function UsersList() {\n  _s();\n\n  var options = {\n    variables: {\n      offset: 0,\n      limit: LOAD_SIZE\n    },\n    fetchPolicy: 'network-only'\n  };\n\n  var _useCustomQuery = useCustomQuery(usersQuery, options),\n      _useCustomQuery2 = _slicedToArray(_useCustomQuery, 4),\n      data = _useCustomQuery2[0],\n      loading = _useCustomQuery2[1],\n      error = _useCustomQuery2[2],\n      loadMore = _useCustomQuery2[3];\n\n  var hasMore = useMemo(function () {\n    if (!data) return false;\n    return data.users.count !== data.users.result.length;\n  }, [data]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 25\n  }, _this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Failed to load...!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, _this);\n  var result = data.users.result;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Column, {\n        className: \"mt-4\",\n        children: /*#__PURE__*/_jsxDEV(Heading1, {\n          children: [/*#__PURE__*/_jsxDEV(LinkTo, {\n            href: \"/\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              title: \"Home\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 42\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, _this), \"/ Users with GraphQL pagination\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(UsersList, {\n      data: result,\n      hasMore: hasMore,\n      loadMore: loadMore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(UsersList, \"REfyZvhgscN51UWi1qgw+NDJVIk=\", false, function () {\n  return [useCustomQuery];\n});\n\n_c = UsersList;\nexport default _c2 = withApollo(UsersList);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UsersList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/components/templates/users-list-gql-pagination.tsx"],"names":["useMemo","withApollo","default","LinkTo","Grid","Column","Row","Heading1","Link","useCustomQuery","usersQuery","LOAD_SIZE","UsersList","options","variables","offset","limit","fetchPolicy","data","loading","error","loadMore","hasMore","users","count","result","length"],"mappings":";;;;;;;AAAA,SAAQA,OAAR,QAAsB,OAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,OAAO,IAAIC,MAApB,QAAkC,WAAlC;AACA,SACIC,IADJ,EACUC,MADV,EACkBC,GADlB,EACuBC,QADvB,EACmDC,IADnD,QAEO,aAFP;AAGA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACpB,MAAMC,OAAO,GAAG;AACZC,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAE,CADD;AAEPC,MAAAA,KAAK,EAAEL;AAFA,KADC;AAKZM,IAAAA,WAAW,EAAE;AALD,GAAhB;;AADoB,wBAQqBR,cAAc,CAACC,UAAD,EAAaG,OAAb,CARnC;AAAA;AAAA,MAQbK,IARa;AAAA,MAQPC,OARO;AAAA,MAQEC,KARF;AAAA,MAQSC,QART;;AAUpB,MAAMC,OAAO,GAAGtB,OAAO,CACnB,YAAM;AACF,QAAI,CAACkB,IAAL,EAAW,OAAO,KAAP;AACX,WAAOA,IAAI,CAACK,KAAL,CAAWC,KAAX,KAAqBN,IAAI,CAACK,KAAL,CAAWE,MAAX,CAAkBC,MAA9C;AACH,GAJkB,EAKnB,CAACR,IAAD,CALmB,CAAvB;AAQA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AApBS,MAsBHK,MAtBG,GAsBUP,IAtBV,CAsBZK,KAtBY,CAsBHE,MAtBG;AAwBpB,sBACI,QAAC,IAAD;AAAA,4BACI,QAAC,GAAD;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,MAAlB;AAAA,+BACI,QAAC,QAAD;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,GAAb;AAAA,mCAAiB,QAAC,IAAD;AAAM,cAAA,KAAK,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjB;AAAA;AAAA;AAAA;AAAA,mBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,aADJ,eASI;AAAA;AAAA;AAAA;AAAA,aATJ,eAUI,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEA,MAAjB;AAAyB,MAAA,OAAO,EAAEH,OAAlC;AAA2C,MAAA,QAAQ,EAAED;AAArD;AAAA;AAAA;AAAA;AAAA,aAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAcH,CAtCD;;GAAMT,S;UAQuCH,c;;;KARvCG,S;AAwCN,qBAAeX,UAAU,CAACW,SAAD,CAAzB","sourcesContent":["import {useMemo} from 'react';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { default as LinkTo } from 'next/link'\nimport {\n    Grid, Column, Row, Heading1, UserCard, Button, Link\n} from '../elements';\nimport useCustomQuery from \"../../hooks/useCustomQuery\";\nimport { usersQuery } from '../../queries/users/users';\nimport { LOAD_SIZE } from '../../constants';\n\nconst UsersList = () => {\n    const options = {\n        variables: {\n            offset: 0,\n            limit: LOAD_SIZE\n        },\n        fetchPolicy: 'network-only'\n    };\n    const [data, loading, error, loadMore] = useCustomQuery(usersQuery, options);\n\n    const hasMore = useMemo(\n        () => {\n            if (!data) return false;\n            return data.users.count !== data.users.result.length\n        },\n        [data]\n    );\n\n    if (loading) return <h2>Loading...</h2>;\n\n    if (error) return <h2>Failed to load...!</h2>;\n\n    const { users: { result } } = data;\n\n    return (\n        <Grid>\n            <Row>\n                <Column className=\"mt-4\">\n                    <Heading1>\n                        <LinkTo href=\"/\"><Link title=\"Home\">Home</Link></LinkTo>\n                        / Users with GraphQL pagination\n                    </Heading1>\n                </Column>\n            </Row>\n            <br />\n            <UsersList data={result} hasMore={hasMore} loadMore={loadMore} />\n        </Grid>\n    )\n};\n\nexport default withApollo(UsersList);\n"]},"metadata":{},"sourceType":"module"}