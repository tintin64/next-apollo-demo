{"ast":null,"code":"import _slicedToArray from \"/Users/sandeeppasunuri/workspace/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sandeeppasunuri/workspace/next-apollo-demo/client/app/components/templates/users-list-gql-pagination.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { withApollo } from '@apollo/client/react/hoc';\nimport useCustomQuery from \"../../hooks/useCustomQuery\";\nimport { usersQuery } from '../../queries/users/users';\nimport { LOAD_SIZE } from '../../constants';\nimport { UsersList, LoadMoreButton, PageTitle } from \"../modules\";\nvar options = {\n  variables: {\n    offset: 0,\n    limit: LOAD_SIZE\n  },\n  fetchPolicy: 'network-only'\n};\n\nvar UsersListWithPagination = function UsersListWithPagination() {\n  _s();\n\n  var _useCustomQuery = useCustomQuery(usersQuery, options),\n      _useCustomQuery2 = _slicedToArray(_useCustomQuery, 4),\n      data = _useCustomQuery2[0],\n      loading = _useCustomQuery2[1],\n      error = _useCustomQuery2[2],\n      loadMore = _useCustomQuery2[3];\n\n  var hasMore = data.users.count > data.users.result.length;\n\n  var renderLoading = function renderLoading() {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 33\n      }\n    }, \"Loading...\");\n  };\n\n  if (loading) return renderLoading();\n  if (error) return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 23\n    }\n  }, \"Failed to load...!\");\n  var result = data.users.result;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageTitle, {\n    title: \"Users with GraphQL pagination\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(UsersList, {\n    data: result,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), hasMore && /*#__PURE__*/React.createElement(LoadMoreButton, {\n    loadMore: loadMore,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }));\n};\n\n_s(UsersListWithPagination, \"mmIqjkwvqmpto9ylcV9H5sirckU=\", false, function () {\n  return [useCustomQuery];\n});\n\n_c = UsersListWithPagination;\nexport default _c2 = withApollo(UsersListWithPagination);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UsersListWithPagination\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/app/components/templates/users-list-gql-pagination.tsx"],"names":["withApollo","useCustomQuery","usersQuery","LOAD_SIZE","UsersList","LoadMoreButton","PageTitle","options","variables","offset","limit","fetchPolicy","UsersListWithPagination","data","loading","error","loadMore","hasMore","users","count","result","length","renderLoading"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,SAApC,QAAqD,YAArD;AAGA,IAAMC,OAAO,GAAG;AACZC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE,CADD;AAEPC,IAAAA,KAAK,EAAEP;AAFA,GADC;AAKZQ,EAAAA,WAAW,EAAE;AALD,CAAhB;;AAQA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAAA;;AAClC,wBAEIX,cAAc,CAACC,UAAD,EAAaK,OAAb,CAFlB;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;AAAA,MAAsBC,KAAtB;AAAA,MAA6BC,QAA7B;;AAIA,MAAMC,OAAO,GAAGJ,IAAI,CAACK,KAAL,CAAWC,KAAX,GAAmBN,IAAI,CAACK,KAAL,CAAWE,MAAX,CAAkBC,MAArD;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,wBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAN;AAAA,GAAtB;;AAEA,MAAIR,OAAJ,EAAa,OAAOQ,aAAa,EAApB;AACb,MAAIP,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AAEX,MAAiBK,MAAjB,GAA8BP,IAA9B,CAAQK,KAAR,CAAiBE,MAAjB;AAEA,sBACI,uDACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,+BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKH,OAAO,iBAAI,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAED,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHhB,CADJ;AAOH,CArBD;;GAAMJ,uB;UAGEX,c;;;KAHFW,uB;AAuBN,qBAAeZ,UAAU,CAACY,uBAAD,CAAzB","sourcesContent":["import { withApollo } from '@apollo/client/react/hoc';\nimport { UsersListProps } from '../../types/user-types';\nimport useCustomQuery from \"../../hooks/useCustomQuery\";\nimport { usersQuery } from '../../queries/users/users';\nimport { LOAD_SIZE } from '../../constants';\nimport { UsersList, LoadMoreButton, PageTitle } from \"../modules\";\nimport {ApolloError} from \"@apollo/client\";\n\nconst options = {\n    variables: {\n        offset: 0,\n        limit: LOAD_SIZE\n    },\n    fetchPolicy: 'network-only'\n};\n\nconst UsersListWithPagination = () => {\n    const [data, loading, error, loadMore]: [\n        UsersListProps, Boolean, ApolloError, Function\n    ] = useCustomQuery(usersQuery, options);\n\n    const hasMore = data.users.count > data.users.result.length;\n\n    const renderLoading = () => <h2>Loading...</h2>;\n\n    if (loading) return renderLoading();\n    if (error) return <h2>Failed to load...!</h2>;\n\n    const { users: { result } } = data;\n\n    return (\n        <>\n            <PageTitle title=\"Users with GraphQL pagination\" />\n            <UsersList data={result} />\n            {hasMore && <LoadMoreButton loadMore={loadMore} />}\n        </>\n    );\n};\n\nexport default withApollo(UsersListWithPagination);\n"]},"metadata":{},"sourceType":"module"}