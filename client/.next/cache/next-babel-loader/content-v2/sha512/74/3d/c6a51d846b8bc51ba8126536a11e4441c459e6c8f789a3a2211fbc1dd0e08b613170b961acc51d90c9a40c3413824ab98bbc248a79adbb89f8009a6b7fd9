{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nconst useCustomQuery = (query, options) => {\n  var _data$users;\n\n  const {\n    data,\n    loading,\n    error,\n    fetchMore,\n    client\n  } = useQuery(query, options);\n  const {\n    0: users,\n    1: setUsers\n  } = useState(data === null || data === void 0 ? void 0 : (_data$users = data.users) === null || _data$users === void 0 ? void 0 : _data$users.result);\n  useEffect(() => {\n    return () => {\n      client.cache.modify({\n        fields: {\n          users: value => _objectSpread(_objectSpread({}, value), {}, {\n            result: []\n          })\n        }\n      });\n    };\n  }, [client]);\n  const loadMore = useCallback(() => fetchMore({\n    variables: {\n      offset: data.users.result.length\n    }\n  }), [fetchMore, data]);\n  return [data, loading, error, loadMore];\n};\n\nexport default useCustomQuery;","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/hooks/useCustomQuery.ts"],"names":["useQuery","useCallback","useEffect","useState","useCustomQuery","query","options","data","loading","error","fetchMore","client","users","setUsers","result","cache","modify","fields","value","loadMore","variables","offset","length"],"mappings":";;;;;;AAAA,SAAyCA,QAAzC,QAAyD,gBAAzD;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;;AAGA,MAAMC,cAAc,GAAG,CACnBC,KADmB,EACOC,OADP,KAIlB;AAAA;;AACD,QAAM;AACFC,IAAAA,IADE;AACIC,IAAAA,OADJ;AACaC,IAAAA,KADb;AACoBC,IAAAA,SADpB;AAC+BC,IAAAA;AAD/B,MAEFX,QAAQ,CACRK,KADQ,EAERC,OAFQ,CAFZ;AAOA,QAAM;AAAA,OAACM,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAACI,IAAD,aAACA,IAAD,sCAACA,IAAI,CAAEK,KAAP,gDAAC,YAAaE,MAAd,CAAlC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTS,MAAAA,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoB;AAChBC,QAAAA,MAAM,EAAE;AACJL,UAAAA,KAAK,EAAEM,KAAK,oCACLA,KADK;AAERJ,YAAAA,MAAM,EAAE;AAFA;AADR;AADQ,OAApB;AAQH,KATD;AAUH,GAXQ,EAWN,CAACH,MAAD,CAXM,CAAT;AAaA,QAAMQ,QAAQ,GAAGlB,WAAW,CACxB,MAAMS,SAAS,CAAC;AAACU,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAAEd,IAAI,CAACK,KAAL,CAAWE,MAAX,CAAkBQ;AAA3B;AAAZ,GAAD,CADS,EAExB,CAACZ,SAAD,EAAYH,IAAZ,CAFwB,CAA5B;AAKA,SAAO,CAACA,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBU,QAAvB,CAAP;AACH,CAjCD;;AAmCA,eAAef,cAAf","sourcesContent":["import { ApolloError, TypedDocumentNode, useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { UsersType } from '../types/user-types';\n\nconst useCustomQuery = (\n    query: TypedDocumentNode, options: Object\n):[\n    { [key: string]: any, users?: UsersType }, Boolean, ApolloError, Function\n] => {\n    const {\n        data, loading, error, fetchMore, client\n    } = useQuery(\n        query,\n        options\n    );\n\n    const [users, setUsers] = useState(data?.users?.result);\n\n    useEffect(() => {\n        return () => {\n            client.cache.modify({\n                fields: {\n                    users: value => ({\n                        ...value,\n                        result: []\n                    })\n                }\n            });\n        }\n    }, [client]);\n\n    const loadMore = useCallback(\n        () => fetchMore({variables: {offset: data.users.result.length}}),\n        [fetchMore, data]\n    );\n\n    return [data, loading, error, loadMore];\n};\n\nexport default useCustomQuery;"]},"metadata":{},"sourceType":"module"}