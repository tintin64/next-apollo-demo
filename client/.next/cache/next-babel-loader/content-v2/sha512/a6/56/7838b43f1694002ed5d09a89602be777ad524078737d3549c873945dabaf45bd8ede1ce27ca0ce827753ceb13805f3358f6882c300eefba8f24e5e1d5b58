{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"/Users/sandeeppasunuri/workspace/next-apollo-demo/client/app/components/templates/users-list-gql-pagination.tsx\",\n    _this = this;\n\nimport { withApollo } from '@apollo/client/react/hoc';\nimport useCustomQuery from \"../../hooks/useCustomQuery\";\nimport { usersQuery } from '../../queries/users/users';\nimport { LOAD_SIZE } from '../../constants';\nimport { UsersList, LoadMoreButton, PageTitle } from \"../modules\";\nvar options = {\n  variables: {\n    offset: 0,\n    limit: LOAD_SIZE\n  },\n  fetchPolicy: 'network-only'\n};\n\nvar UsersListWithPagination = function UsersListWithPagination() {\n  var _useCustomQuery = useCustomQuery(usersQuery, options),\n      _useCustomQuery2 = _slicedToArray(_useCustomQuery, 4),\n      data = _useCustomQuery2[0],\n      loading = _useCustomQuery2[1],\n      error = _useCustomQuery2[2],\n      loadMore = _useCustomQuery2[3];\n\n  var renderLoading = function renderLoading() {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 33\n    }, _this);\n  };\n\n  if (loading) return renderLoading();\n  if (error) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Failed to load...!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, _this);\n  var hasMore = data.users.count > data.users.result.length;\n  var result = data.users.result;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      title: \"Users with GraphQL pagination\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(UsersList, {\n      data: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, _this), hasMore && /*#__PURE__*/_jsxDEV(LoadMoreButton, {\n      loadMore: loadMore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }, _this)]\n  }, void 0, true);\n};\n\nexport default withApollo(UsersListWithPagination);","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/app/components/templates/users-list-gql-pagination.tsx"],"names":["withApollo","useCustomQuery","usersQuery","LOAD_SIZE","UsersList","LoadMoreButton","PageTitle","options","variables","offset","limit","fetchPolicy","UsersListWithPagination","data","loading","error","loadMore","renderLoading","hasMore","users","count","result","length"],"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,SAApC,QAAqD,YAArD;AAGA,IAAMC,OAAO,GAAG;AACZC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE,CADD;AAEPC,IAAAA,KAAK,EAAEP;AAFA,GADC;AAKZQ,EAAAA,WAAW,EAAE;AALD,CAAhB;;AAQA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAClC,wBAEIX,cAAc,CAACC,UAAD,EAAaK,OAAb,CAFlB;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;AAAA,MAAsBC,KAAtB;AAAA,MAA6BC,QAA7B;;AAIA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,wBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAN;AAAA,GAAtB;;AAEA,MAAIH,OAAJ,EAAa,OAAOG,aAAa,EAApB;AACb,MAAIF,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEX,MAAMG,OAAO,GAAGL,IAAI,CAACM,KAAL,CAAWC,KAAX,GAAmBP,IAAI,CAACM,KAAL,CAAWE,MAAX,CAAkBC,MAArD;AACA,MAAiBD,MAAjB,GAA8BR,IAA9B,CAAQM,KAAR,CAAiBE,MAAjB;AAEA,sBACI;AAAA,4BACI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,aAFJ,EAGKH,OAAO,iBAAI,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEF;AAA1B;AAAA;AAAA;AAAA;AAAA,aAHhB;AAAA,kBADJ;AAOH,CApBD;;AAsBA,eAAehB,UAAU,CAACY,uBAAD,CAAzB","sourcesContent":["import { withApollo } from '@apollo/client/react/hoc';\nimport { UsersListProps } from '../../types/user-types';\nimport useCustomQuery from \"../../hooks/useCustomQuery\";\nimport { usersQuery } from '../../queries/users/users';\nimport { LOAD_SIZE } from '../../constants';\nimport { UsersList, LoadMoreButton, PageTitle } from \"../modules\";\nimport {ApolloError} from \"@apollo/client\";\n\nconst options = {\n    variables: {\n        offset: 0,\n        limit: LOAD_SIZE\n    },\n    fetchPolicy: 'network-only'\n};\n\nconst UsersListWithPagination = () => {\n    const [data, loading, error, loadMore]: [\n        UsersListProps, Boolean, ApolloError, Function\n    ] = useCustomQuery(usersQuery, options);\n\n    const renderLoading = () => <h2>Loading...</h2>;\n\n    if (loading) return renderLoading();\n    if (error) return <h2>Failed to load...!</h2>;\n\n    const hasMore = data.users.count > data.users.result.length;\n    const { users: { result } } = data;\n\n    return (\n        <>\n            <PageTitle title=\"Users with GraphQL pagination\" />\n            <UsersList data={result} />\n            {hasMore && <LoadMoreButton loadMore={loadMore} />}\n        </>\n    );\n};\n\nexport default withApollo(UsersListWithPagination);\n"]},"metadata":{},"sourceType":"module"}