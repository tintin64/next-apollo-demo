{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect } from \"react\";\n\nvar useCustomQuery = function useCustomQuery(query, options) {\n  var _useQuery = useQuery(query, options),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore,\n      client = _useQuery.client;\n\n  useEffect(function () {\n    return function () {\n      client.cache.modify({\n        fields: {\n          users: function users(value) {\n            return _objectSpread(_objectSpread({}, value), {}, {\n              result: []\n            });\n          }\n        }\n      });\n    };\n  }, [client]);\n  var loadMore = useCallback(function () {\n    return fetchMore({\n      variables: {\n        offset: data.users.result.length\n      }\n    });\n  }, [fetchMore, data]);\n  return [data, loading, error, loadMore];\n};\n\nexport default useCustomQuery;","map":{"version":3,"sources":["/Users/sandeeppasunuri/workspace/next-apollo-demo/client/app/hooks/useCustomQuery.ts"],"names":["useQuery","useCallback","useEffect","useCustomQuery","query","options","data","loading","error","fetchMore","client","cache","modify","fields","users","value","result","loadMore","variables","offset","length"],"mappings":";;;;;;AAAA,SAAyCA,QAAzC,QAAyD,gBAAzD;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAiD,OAAjD;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CACnBC,KADmB,EACOC,OADP,EAIlB;AACD,kBAEIL,QAAQ,CACRI,KADQ,EAERC,OAFQ,CAFZ;AAAA,MACIC,IADJ,aACIA,IADJ;AAAA,MACUC,OADV,aACUA,OADV;AAAA,MACmBC,KADnB,aACmBA,KADnB;AAAA,MAC0BC,SAD1B,aAC0BA,SAD1B;AAAA,MACqCC,MADrC,aACqCA,MADrC;;AAOAR,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAO,YAAM;AACTQ,MAAAA,MAAM,CAACC,KAAP,CAAaC,MAAb,CAAoB;AAChBC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,eAAAC,KAAK;AAAA,mDACLA,KADK;AAERC,cAAAA,MAAM,EAAE;AAFA;AAAA;AADR;AADQ,OAApB;AAQH,KATD;AAUH,GAXQ,EAWN,CAACN,MAAD,CAXM,CAAT;AAaA,MAAMO,QAAQ,GAAGhB,WAAW,CACxB;AAAA,WAAMQ,SAAS,CAAC;AAACS,MAAAA,SAAS,EAAE;AAACC,QAAAA,MAAM,EAAEb,IAAI,CAACQ,KAAL,CAAWE,MAAX,CAAkBI;AAA3B;AAAZ,KAAD,CAAf;AAAA,GADwB,EAExB,CAACX,SAAD,EAAYH,IAAZ,CAFwB,CAA5B;AAKA,SAAO,CAACA,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBS,QAAvB,CAAP;AACH,CA/BD;;AAiCA,eAAed,cAAf","sourcesContent":["import { ApolloError, TypedDocumentNode, useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { UsersListProps } from '../types/user-types';\n\nconst useCustomQuery = (\n    query: TypedDocumentNode, options: Object\n):[\n    UsersListProps, Boolean, ApolloError, Function\n] => {\n    const {\n        data, loading, error, fetchMore, client\n    } = useQuery(\n        query,\n        options\n    );\n\n    useEffect(() => {\n        return () => {\n            client.cache.modify({\n                fields: {\n                    users: value => ({\n                        ...value,\n                        result: []\n                    })\n                }\n            });\n        }\n    }, [client]);\n\n    const loadMore = useCallback(\n        () => fetchMore({variables: {offset: data.users.result.length}}),\n        [fetchMore, data]\n    );\n\n    return [data, loading, error, loadMore];\n};\n\nexport default useCustomQuery;"]},"metadata":{},"sourceType":"module"}